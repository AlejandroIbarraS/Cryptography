import java.util.*;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
/**
 *
 * @author Alex Ibarra
 */
public class frmEncriptacion extends javax.swing.JFrame {
    File fichero;
    boolean isCifrado;
    String alfabetoElegido;
    char [] alfabeto;
    String englishAlphabet = "abcdefghijklmnopqrstuvwxyz";
    String spanishAlphabet = "abcdefghijklmnñopqrstuvwxyz";
    String operationAlphabet = "/*-+";
    String numbersAlphabet = "0123456789";
    String ascii;
    boolean spacesFlag=false;
    
    
    
    /**
     * Creates new form frmEncriptacion
     */
    public frmEncriptacion() {
        initComponents();
        setLocationRelativeTo(null);
        txtAlfa.setEnabled(false);
        txtBeta.setEnabled(false);
        txtKey.setEnabled(false);
        txtAlfa.setVisible(false);
        lblAlfa.setVisible(false);
        txtBeta.setVisible(false);
        lblBeta.setVisible(false);
        rdbAleatorio.setSelected(true);
        txtAlfabeto.setEnabled(false);
        txtAlfabeto.setText("26");
        lblAlfabeto.setText("Tam. alfabeto inglés (minusculas)");
        chkEspacios.setVisible(false);
        lblAlfabeto1.setVisible(false);
        cboAlfabeto.setVisible(false);
        for(int i=0;i<255;i++){
            ascii=ascii+(char)i;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgpLlave = new javax.swing.ButtonGroup();
        txtRutaEntrada = new javax.swing.JTextField();
        cboOperacion = new javax.swing.JComboBox();
        btnBuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblAlfa = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        btnEjecutar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lblAlfabeto1 = new javax.swing.JLabel();
        txtAlfa = new javax.swing.JTextField();
        rdbAleatorio = new javax.swing.JRadioButton();
        rdbManual = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        cboAlgoritmo = new javax.swing.JComboBox();
        lblBeta = new javax.swing.JLabel();
        txtBeta = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cboAlfabeto = new javax.swing.JComboBox();
        chkEspacios = new javax.swing.JCheckBox();
        lblKey = new javax.swing.JLabel();
        txtKey = new javax.swing.JTextField();
        lblTamLlave = new javax.swing.JLabel();
        txtTamLlave = new javax.swing.JTextField();
        lblAlfabeto = new javax.swing.JLabel();
        txtAlfabeto = new javax.swing.JTextField();
        txtAlfaEuclides = new javax.swing.JTextField();
        lblBeta1 = new javax.swing.JLabel();
        lblBeta2 = new javax.swing.JLabel();
        txtNEuclides = new javax.swing.JTextField();
        lblBeta3 = new javax.swing.JLabel();
        btnAEE = new javax.swing.JButton();
        btnAE = new javax.swing.JButton();
        btnAmbos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtRutaEntrada.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtRutaEntrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 780, 40));

        cboOperacion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboOperacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cifrar", "Descifrar" }));
        cboOperacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboOperacionActionPerformed(evt);
            }
        });
        getContentPane().add(cboOperacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 230, 250, 50));

        btnBuscar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 130, 160, 40));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("CIFRADOR / DESCIFRADOR");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, -1, 40));

        lblAlfa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAlfa.setText("Alfa:");
        getContentPane().add(lblAlfa, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 310, 160, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Ingrese la ruta del archivo:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));

        btnSalir.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 430, 160, 40));

        btnEjecutar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnEjecutar.setText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEjecutar, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 430, 160, 40));

        btnLimpiar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 430, 160, 40));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 620, 40, 30));

        lblAlfabeto1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAlfabeto1.setText("Elige el alfabeto a usar");
        getContentPane().add(lblAlfabeto1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 400, -1, -1));

        txtAlfa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtAlfa, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 340, 160, 40));

        bgpLlave.add(rdbAleatorio);
        rdbAleatorio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rdbAleatorio.setText("Generar llave aleatoriamente");
        rdbAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbAleatorioActionPerformed(evt);
            }
        });
        getContentPane().add(rdbAleatorio, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 310, -1, -1));

        bgpLlave.add(rdbManual);
        rdbManual.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rdbManual.setText("Introducir llave manualmente");
        rdbManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbManualActionPerformed(evt);
            }
        });
        rdbManual.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                rdbManualPropertyChange(evt);
            }
        });
        getContentPane().add(rdbManual, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 360, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Selecciona la operación a realizar:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, -1, -1));

        cboAlgoritmo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboAlgoritmo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Vigènere Cipher", "Affine Cipher" }));
        cboAlgoritmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboAlgoritmoActionPerformed(evt);
            }
        });
        getContentPane().add(cboAlgoritmo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, 250, 50));

        lblBeta.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblBeta.setText("Beta: ");
        getContentPane().add(lblBeta, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 310, 160, -1));

        txtBeta.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtBeta, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 340, 160, 40));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Elige el algoritmo a utilizar");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 200, -1, -1));

        cboAlfabeto.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboAlfabeto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Inglés", "Español", "Números", "Inglés + números", "Español + números", "ASCII completo" }));
        cboAlfabeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboAlfabetoActionPerformed(evt);
            }
        });
        getContentPane().add(cboAlfabeto, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 430, 250, 50));

        chkEspacios.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chkEspacios.setText("Encriptar espacios");
        getContentPane().add(chkEspacios, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, -1, -1));

        lblKey.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblKey.setText("Key:");
        getContentPane().add(lblKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 310, 350, -1));

        txtKey.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 340, 400, 40));

        lblTamLlave.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTamLlave.setText("Tamaño llave: ");
        getContentPane().add(lblTamLlave, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 310, 160, -1));

        txtTamLlave.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtTamLlave, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 340, 160, 40));

        lblAlfabeto.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAlfabeto.setText("Tamaño alfabeto: ");
        getContentPane().add(lblAlfabeto, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 210, 290, -1));

        txtAlfabeto.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtAlfabeto, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 240, 160, 40));

        txtAlfaEuclides.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtAlfaEuclides, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 570, 160, 40));

        lblBeta1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblBeta1.setText("Sección de prueba de Algoritmo de Euclides (AE) y Algoritmo de Euclides Extendido (AEE):");
        getContentPane().add(lblBeta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 510, 730, -1));

        lblBeta2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblBeta2.setText("α: ");
        getContentPane().add(lblBeta2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 542, 160, 20));

        txtNEuclides.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtNEuclides, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 570, 160, 40));

        lblBeta3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblBeta3.setText("n: ");
        getContentPane().add(lblBeta3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 540, 160, 20));

        btnAEE.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAEE.setText("AEE");
        btnAEE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAEEActionPerformed(evt);
            }
        });
        getContentPane().add(btnAEE, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 570, 160, 40));

        btnAE.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAE.setText("AE");
        btnAE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAEActionPerformed(evt);
            }
        });
        getContentPane().add(btnAE, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 570, 160, 40));

        btnAmbos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAmbos.setText("Ambos");
        btnAmbos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmbosActionPerformed(evt);
            }
        });
        getContentPane().add(btnAmbos, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 570, 160, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Function to verify that a candidate key for the affine cipher is a valid key
    private boolean verifyKey(int [] key, int N){
        boolean isValid=false;
        if(algoritmoEuclides(key[0],N) == 1 )
            isValid=true;
        return isValid;
    }
    
    /*
    Function: algoritmoEuclides
    parametros: a, b (Elementos de los que se obtendrá el gcd)
    retorno: a (El maximo comun divisor de a y b)
    */
    private int algoritmoEuclides(int a, int b){
        int r,temp;
        while(b>0){
            r=a % b;
            a=b;
            b=r;
        }
        if(a!=1)
            JOptionPane.showMessageDialog(this, a+" y "+b+" NO SON COPRIMOS, prueba con otro valor","Error",JOptionPane.ERROR_MESSAGE);
        return a;
    }
    
    /*
    Function: inverseAditive
    parametros: key[2] (Llave válida key[0]=a y key[1]=b), n (Cantidad de elementos del anillo)
    retorno: inverse (El inverso aditivo de beta)
    */
    private int inverseAditive(int beta, int n){
        int inverse=beta*-1;
        inverse=(inverse+n)%n;
        return inverse;
    }
    
    
    /*
    Function: inverseMultiplicative
    parametros: key[2] (Llave válida key[0]=alfa y key[1]=beta), n (Cantidad de elementos del anillo)
    retorno: inverse (El inverso multiplicativo de alfa)
    */
    private int inverseMultiplicative(int [] key, int n){
        int inverse=1;
        int [] expr = algoritmoEuclidesExtendido(n,key[0]);
        //Si el gcd es 1, significa que no tiene inverso
        if(expr[0]!=1)
            return -1;
        //Se retorna el valor x de gcd = ax + by, pues a-1 mod b = x mod b
        inverse=expr[2] % n ;
        //Si el resultado es negativo se devuelve al anillo
        if(inverse<0)
            inverse=inverse+n;
        return inverse;
    }
    
    
    /*
    Function: algoritmoEuclidesExtendido
    parametros: a, b (Elementos de los que se obtendrá el gcd)
    retorno: resultado[3] (El resultado a regresar son un conjunto de tres valores, el gcd,y los valores x1 y x2 tal que gcd = a*x1 + b*x2, se retornan en ese orden)
    */
    private int [] algoritmoEuclidesExtendido(int a, int b){
        int [] resultado = new int[3];
        int [] gcd=new int[5], ecu=new int[5], sustituir=new int[5];
        int r, i;
        int x=a,y=b;
        int cociente=0,flag=0;
        ArrayList datos = new ArrayList();
        //Se realiza el algoritmo de Euclides básico, pero se van guardando las expresiones tras cada iteración en el arraylist datos
        //Se guardan los 5 valores que componen la ecuación ---->        residuo = a * 1 - b * cociente
        while(b>0){
            gcd[1]=a;
            gcd[3]=b;
            r=a % b;
            cociente = a / b;
            a=b;
            b=r;
            gcd[0]=r;
            gcd[2]=1;
            gcd[4]=-1*cociente;
            datos.add(gcd.clone());
        }
        //Si la cantidad de expresiones obtenidas es 1, quiere decir que se obtuvo residuo 0 inmediatamente entonces se retornan los valores de gcd, x1 y x2
        if(datos.size()==1){
            resultado[0]=a;
            //resultado[1]=1;
            //resultado[2]=-1*(cociente-1);
            resultado[1]=0;
            resultado[2]=1;
            flag=1;
        }
        //Se elimina el último elemento del ArrayList que tiene todas las expresiones, pues es en el que se encuentra el residuo de 0
        datos.remove(datos.size()-1);
        if(datos.size()==1){
            ecu=(int [])datos.get(0);
            resultado[0]=ecu[0];
            resultado[1]=ecu[2];
            resultado[2]=ecu[4];
            flag=1;
        }
        //Se recorren las expresiones desde la última obtenida hasta la primera
        for(i=datos.size()-1;i>0;i--){
            //Se obtienen la ecuación con la que se trabajará y la que se sustituira en esta
            ecu=(int [])datos.get(i);
            sustituir=(int [])datos.get(i-1);
            //Se elimina la ecuación que se sustituirá pues está ya no se ocupará
            datos.remove(i-1);
            //Se busca en que parte de la ecuación realizar la sustitución, y se sustituye, unicamente modificando el valor 
            //Es decir, si la ecuacion es de la forma a = b(c) + d(e), solo se modifican los valores c y e, así como b o d dependiendo de cual de estos valores sea igual al valor 
            //que se está sustituyendo
            if(ecu[1]==sustituir[0]){
                ecu[4]=ecu[4]+sustituir[4]*ecu[2];
                ecu[2]=sustituir[2]*ecu[2];
                ecu[1]=sustituir[1];
            }
            if(ecu[3]==sustituir[0]){
                ecu[2]=ecu[2]+sustituir[4]*ecu[4];
                ecu[4]=sustituir[2]*ecu[4];
                ecu[3]=sustituir[1];
            }
            
        }
        //Teniendo en cuenta que el algoritmo regresa  ---->   gcd = a (x1) + b(x2)
        //Se acomoda el arreglo a retornar de forma que resultado[1] sea x1 y resultado[2] sea x2
        if(flag==0){
            resultado[0]=ecu[0];
            if(ecu[1]==sustituir[1]){
                resultado[1]=ecu[2];
                resultado[2]=ecu[4];
            }else{
                resultado[1]=ecu[4];
                resultado[2]=ecu[2];
            }
        }
        if(resultado[0]!=1)
            JOptionPane.showMessageDialog(this, x+" y "+y+" NO SON COPRIMOS, prueba con otro valor","Error",JOptionPane.ERROR_MESSAGE);
        return resultado;
    }
    
    /*
    Function: generateRandomKeyAffine
    parametros: n (Cantidad de elementos del alfabeto a manejar)
    retorno: key (La llave generada)
    */
    private int [] generateRandomKeyAffine(int n){
        int a=1;
        int b;
        int [] key = new int[2];
        Random rn = new Random();
        boolean flag=false;
        //Se generan números aleatorios hasta conseguir que el generado tenga inverso multiplicativo en el anillo n
        b = rn.nextInt(n);
        key[1]=b;
        while(!flag){
            a = rn.nextInt(n-1)+1;
            key[0]=a;
            if(verifyKey(key,n)){
                flag=true;
            }
        }
        return key;
    }
    
    /*
    Function: generateRandomKeyVigenere
    parametros: tam (tamaño de la llave a generar)
    retorno: keyword (La llave generada)
    */
    private String generateRandomKeyVigenere(int tam){
        int b;
        String keyword="";
        Random rn = new Random();
        for(int i=0;i<tam;i++){
            b = rn.nextInt(26);         //Tamaño del alfabeto inglés
            keyword = keyword + (char)(b + 'a');
        }
        return keyword;
    }
    
    /*
    Function: affineCipher
    parametros: text (texto a cifrar), n (tamaño del anillo o del alfabeto), key[2] (arreglo de tamaño 2 correspondiente a la llave (alfa, beta)) 
    retorno: 
    */
    private String affineCipher(String text, int n, int [] key){ 
        String cipherText="";
        int p, alfa, beta, C;
        alfa = key[0];
        beta = key[1];
        for(int i=0; i<text.length();i++){
            p = text.charAt(i) % n;
            C = ( alfa * p + beta ) % n;
            cipherText = cipherText + (char)C;
        }
        return cipherText;
    }
    
    
    /*
    Function: affineDecipher
    parametros: text (texto a descifrar), n (tamaño del anillo o del alfabeto), key[2] (arreglo de tamaño 2 correspondiente a la llave (alfa, beta)) 
    retorno: plainText (texto descifrado)
    */
    private String affineDecipher(String text, int n, int [] key){    
        String plainText="";
        int p, inMulAlfa, inAdiBeta, C;
        //Calculo de la llave de descifrado
        inMulAlfa = inverseMultiplicative(key,n);
        inAdiBeta = inverseAditive(key[1],n);
        for(int i=0; i<text.length();i++){
            C=text.charAt(i)%n;
            p = (inMulAlfa * ( C + inAdiBeta )) % n;
            plainText = plainText + (char)p;  
        }
        return plainText;
    }
    
    
    
    
    private int findValue(char [] alphabet, char p){
        int i=0, value=-1;
        boolean flag=false;
        while(i<alphabet.length && !flag){
            if(alphabet[i]==p){
                flag=true;
                value=i;
            }
            i++;
        }
        if(flag==false)
            value=-1;
        return value;
    }
    
    
    /*
    Function: vigenereCipher
    parametros: key (palabras llave), text (texto plano), n (tamaño del alfabeto)
    retorno: cipherText (texto cifrado)
    */
    private String vigenereCipher(String key, String text, int n){
        String cipherText="";
        int j=0, P, k, C;
        for(int i=0;i<text.length();i++){
            //Si el texto tiene espacios, saltos de línea o retornos de carro se ignoran
            if(!(text.charAt(i)=="\n".charAt(0) ||  text.charAt(i)== " ".charAt(0) || text.charAt(i)=="\r".charAt(0))){
                P=text.charAt(i)-'a';
                k=key.charAt(j)-'a';
                C = (P + k) % n;
                cipherText=cipherText+(char)(C + 'a');
                j=(j+1)%key.length();
            }else{
                //Si se desea agregar los espacios en blanco al texdto cifrado
                //cipherText=cipherText+text.charAt(i);
            }
        }
        return cipherText;
    }
    
    
    
    /*
    Function: vigenereDecipher
    parametros: key (palabras llave), text (texto cifrado), n (tamaño del alfabeto)
    retorno: plainText (texto descifrado)
    */
    private String vigenereDecipher(String key, String text, int n){
        String plainText="";
        int j=0, P, invAdiK, C;
        for(int i=0;i<text.length();i++){
            //Si el texto tiene espacios, saltos de línea o retornos de carro se ignoran
            if(!(text.charAt(i)=="\n".charAt(0) ||  text.charAt(i)== " ".charAt(0))){
                C=text.charAt(i)-'a';
                invAdiK=inverseAditive(key.charAt(j)-'a',n);
                P = (C + invAdiK) % n;
                plainText=plainText+(char)(P + 'a');
                j=(j+1)%key.length();
            }else{
                //Si se desea agregar los espacios en blanco al texdto cifrado
                //plainText=plainText+text.charAt(i);
            }
        }
        return plainText;
    }
    
    
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\Users\\alexi\\Desktop"));
        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION){
           fichero = fileChooser.getSelectedFile();
           txtRutaEntrada.setText(fichero.getPath());
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        //algoritmoEuclidesExtendido(1180,482);
        //algoritmoEuclides(35,5);
        /*System.out.println("Verificar llave");
        int [] key = {23, 4};
        boolean isValid = verifyKey(key,29);
        System.out.println(isValid);
        if(isValid){
            System.out.println("Inverso multiplicativo");
            System.out.println(inverseMultiplicative(key,29));
        }
        
        System.out.println("Random key");
        key = generateRandomKey(256);
        System.out.println("K=( "+key[0]+", "+key[1]+" )");
        
        
        
        System.out.println("Inversos");
        int [] key1 = {239, 4};
        inverseMultiplicative(key1,97);
        int [] key2 = {83, 4};
        inverseMultiplicative(key2,173);
        int [] key3 = {482, 4};
        inverseMultiplicative(key3,1180);
        int [] key4 = {15, 4};
        inverseMultiplicative(key4,25);
        
        
        System.out.println("Lenguajes");
        Locale en = new Locale("en");
        System.out.println(getLocale().getDisplayLanguage(en));*/
        /*System.out.println("El cifrado es");
        alfabetoElegido=englishAlphabet;
        alfabeto = alfabetoElegido.toCharArray();
        int [] key5 = {5, 7};
        affineCipher("holamundo",englishAlphabet.length(),key5);
        System.out.println("El descifrado es:");
        affineDecipher("qzkhpduwz",englishAlphabet.length(),key5);
        
        
        System.out.println("Vigenere cipher");
        System.out.println(vigenereCipher("privacy","kasiskimethod",26));
        System.out.println("Vigenere decipher");
        System.out.println(vigenereDecipher("privacy","zradsmgbvbcof",26));
        txtKey.setText("abcdefghijklmnopqrstuvabcdefghijk");*/
        
        
        /*System.out.println("AVEEEEEER");
        String r ="";
        r=r+(char)51;
        r=r+(char)13;
        r=r+(char)200;
        r=r+(char)89;
        System.out.println(r);
        for(int w=0;w<r.length();w++){
            System.out.println("Valor: "+(int)r.charAt(w));
            System.out.println("Caracter: "+r.charAt(w));
        }*/
        System.exit(0);
        /*affineCipher("holamundo",englishAlphabet.length(),key5);
        System.out.println("El descifrado es:");
        affineDecipher("qzkhpduwz",englishAlphabet.length(),key5);*/
        
        
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        int [] key = new int[2]; 
        int keySize;
        int tamAlf=Integer.parseInt(txtAlfabeto.getText());
        String keyword="";
        /*switch(cboAlfabeto.getSelectedIndex()){
            case 0: 
                alfabetoElegido = englishAlphabet;
            break;
            case 1: 
                alfabetoElegido = spanishAlphabet;
            break;
            case 2: 
                alfabetoElegido = numbersAlphabet;
            break;
            case 3: 
                alfabetoElegido = englishAlphabet+numbersAlphabet;
            break;
            case 4: 
                alfabetoElegido = spanishAlphabet+numbersAlphabet;
            break;
            case 5: 
                alfabetoElegido = ascii;
            break;
        }
        if(chkEspacios.isSelected() && !alfabetoElegido.equals(ascii)){
            alfabetoElegido=alfabetoElegido+" \n";
            spacesFlag = true;
        }else{
            spacesFlag=false;
        }*/
        
        
        if(rdbAleatorio.isSelected()){
            if(cboAlgoritmo.getSelectedIndex()==1){
                key = generateRandomKeyAffine(tamAlf);
                txtAlfa.setText(""+key[0]);
                txtBeta.setText(""+key[1]);
            }else{
                keySize=Integer.parseInt(txtTamLlave.getText());
                keyword=generateRandomKeyVigenere(keySize);
                txtKey.setText(keyword);
            }
        }else if(rdbManual.isSelected()){
            if(cboAlgoritmo.getSelectedIndex()==1){
                key[0]=Integer.parseInt(txtAlfa.getText());
                key[1]= Integer.parseInt(txtBeta.getText());
                if(!verifyKey(key,tamAlf)){
                    JOptionPane.showMessageDialog(this, "Por favor introduzca una llave valida.","Error",JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }else{
                keyword=txtKey.getText();
            }
            
            System.out.println("Llave valida");
        }
        //alfabeto = alfabetoElegido.toCharArray();
        //Ejecucion de cifrado y descifrado
        String nombre;
        try{
            BufferedReader bf = new BufferedReader(new FileReader(fichero));
            String texto="",linea;
            int caracter;
            caracter=bf.read();
            while(caracter!=-1){
                texto=texto+(char)caracter;
                caracter=bf.read();
            }
            bf.close();
            
            
            /*FileInputStream fis = new FileInputStream(fichero);
            DataInputStream dis = new DataInputStream (fis);
            String texto="",linea;
            int caracter;
            caracter=dis.readInt();
            while(caracter!=-1){
                texto=texto+(char)caracter;
                caracter=dis.readInt();
            }*/
            //System.out.println(texto);
            
            
            
            
            //Se forma el nombre del archivo a crear, ya sea cifrado o descifrado
            if(cboOperacion.getSelectedIndex()==0){
                if(cboAlgoritmo.getSelectedIndex()==0)
                    nombre=fichero.getAbsolutePath().replace(".txt","")+".vig";
                else
                    nombre=fichero.getAbsolutePath().replace(".txt","")+".aff";
            }
            else{
                nombre=fichero.getAbsolutePath().replace(".txt","");
                nombre=nombre.replace(".vig","");
                nombre=nombre.replace(".aff","");
                nombre=nombre+".txt";
            }
                
            System.out.println(nombre);
            BufferedWriter bw;
            //Se verifica la opción del usuario
            if(cboOperacion.getSelectedIndex()==0){
                //Cifrado
                if(cboAlgoritmo.getSelectedIndex()==0){
                    texto=vigenereCipher(keyword, texto, tamAlf);
                }else{
                    texto=affineCipher(texto,tamAlf,key);
                    System.out.println(texto);
                    
                }
                /*FileOutputStream fos = new FileOutputStream(nombre);
                DataOutputStream dos = new DataOutputStream(fos);
                dos.flush();
                dos.writeChars(texto);
                dos.flush();
                dos.close();*/
                bw = new BufferedWriter(new FileWriter(nombre));
                bw.write(texto);
                bw.close();
                JOptionPane.showMessageDialog(this, "Encriptación exitosa", "Éxito",1);
            }else{
                //Descifrado
                if(cboAlgoritmo.getSelectedIndex()==0){
                    texto=vigenereDecipher(keyword, texto, tamAlf);
                }else{
                    texto=affineDecipher(texto,tamAlf,key);
                    System.out.println(texto);
                }
                bw = new BufferedWriter(new FileWriter(nombre));
                bw.write(texto);
                bw.close();
                /*FileOutputStream fos = new FileOutputStream(nombre);
                DataOutputStream dos = new DataOutputStream(fos);
                dos.flush();
                dos.writeChars(texto);
                dos.close();*/
                JOptionPane.showMessageDialog(this, "Desencriptación exitosa", "Éxito",1);
            }
        }catch(IOException e){
            e.printStackTrace();
        }  
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        txtRutaEntrada.setText("");
        cboAlgoritmo.setSelectedIndex(0);
        cboOperacion.setSelectedIndex(0);
        txtAlfa.setText("");
        txtBeta.setText("");
        txtKey.setText("");
        txtTamLlave.setText("");
        rdbAleatorio.setSelected(true);
        lblTamLlave.setVisible(true);
        txtTamLlave.setVisible(true);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void cboOperacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboOperacionActionPerformed
        // TODO add your handling code here:
        if(cboOperacion.getSelectedIndex()==0)
            isCifrado = true;
        else
            isCifrado = false;
    }//GEN-LAST:event_cboOperacionActionPerformed

    private void cboAlgoritmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboAlgoritmoActionPerformed
        // TODO add your handling code here:
        if(cboAlgoritmo.getSelectedIndex()==0){
            txtAlfa.setVisible(false);
            lblAlfa.setVisible(false);
            txtBeta.setVisible(false);
            lblBeta.setVisible(false);
            lblKey.setVisible(true);
            txtKey.setVisible(true);
            if(rdbAleatorio.isSelected()){
                lblTamLlave.setVisible(true);
                txtTamLlave.setVisible(true);
            }
            txtAlfabeto.setEnabled(false);
            txtAlfabeto.setText("26");
            lblAlfabeto.setText("Tam. alfabeto inglés (minusculas)");
        }else{
            txtAlfa.setVisible(true);
            lblAlfa.setVisible(true);
            txtBeta.setVisible(true);
            lblBeta.setVisible(true);
            lblKey.setVisible(false);
            txtKey.setVisible(false);
            lblTamLlave.setVisible(false);
            txtTamLlave.setVisible(false);
            txtAlfabeto.setEnabled(true);
            txtAlfabeto.setText("");
            lblAlfabeto.setText("Tamaño alfabeto:");
        }
    }//GEN-LAST:event_cboAlgoritmoActionPerformed

    private void rdbManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbManualActionPerformed
        if(rdbAleatorio.isSelected()){
            txtAlfa.setText("");
            txtBeta.setText("");
            txtKey.setText("");
            txtAlfa.setEnabled(false);
            txtBeta.setEnabled(false);
            txtKey.setEnabled(false);
            if(cboAlgoritmo.getSelectedIndex()==0){
                txtTamLlave.setText("");
                lblTamLlave.setVisible(true);
                txtTamLlave.setVisible(true);
            }else{
                lblTamLlave.setVisible(false);
                txtTamLlave.setVisible(false);
            }
        }else if (rdbManual.isSelected()){
            txtAlfa.setEnabled(true);
            txtBeta.setEnabled(true);
            txtKey.setEnabled(true);
            lblTamLlave.setVisible(false);
            txtTamLlave.setVisible(false);
        }
    }//GEN-LAST:event_rdbManualActionPerformed

    private void rdbManualPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_rdbManualPropertyChange
        // TODO add your handling code here:
        
    }//GEN-LAST:event_rdbManualPropertyChange

    private void rdbAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbAleatorioActionPerformed
        if(rdbAleatorio.isSelected()){
            txtAlfa.setText("");
            txtBeta.setText("");
            txtKey.setText("");
            txtAlfa.setEnabled(false);
            txtBeta.setEnabled(false);
            txtKey.setEnabled(false);
            if(cboAlgoritmo.getSelectedIndex()==0){
                txtTamLlave.setText("");
                lblTamLlave.setVisible(true);
                txtTamLlave.setVisible(true);
            }else{
                lblTamLlave.setVisible(false);
                txtTamLlave.setVisible(false);
            }
        }else if (rdbManual.isSelected()){
            txtAlfa.setEnabled(true);
            txtBeta.setEnabled(true);
            txtKey.setEnabled(true);
            lblTamLlave.setVisible(false);
            txtTamLlave.setVisible(false);
        }
    }//GEN-LAST:event_rdbAleatorioActionPerformed

    private void cboAlfabetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboAlfabetoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboAlfabetoActionPerformed

    private void btnAEEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAEEActionPerformed
        // TODO add your handling code here:
        int alfa, n, mcd;
        int [] resultado;
        alfa=Integer.parseInt(txtAlfaEuclides.getText());
        n=Integer.parseInt(txtNEuclides.getText());
        resultado=algoritmoEuclidesExtendido(n,alfa);
        String mensaje = resultado[0] + "=" + alfa + "( "+resultado[2]+" ) + "+n+"( "+resultado[1]+" )";
        int [] prueba = {alfa};
        int inverse = inverseMultiplicative(prueba,n);
        if(inverse!=-1)
            mensaje=mensaje+"\nEl inverso de "+alfa+" modulo "+n+" es: "+inverse;
        else
            mensaje=mensaje+"\nEl inverso de "+alfa+" modulo "+n+" no existe.";
        JOptionPane.showMessageDialog(this, mensaje, "Algoritmo Euclides Extendido",1);
        
    }//GEN-LAST:event_btnAEEActionPerformed

    private void btnAEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAEActionPerformed
        // TODO add your handling code here:
        int alfa, n, mcd;
        alfa=Integer.parseInt(txtAlfaEuclides.getText());
        n=Integer.parseInt(txtNEuclides.getText());
        mcd=algoritmoEuclides(n,alfa);
        JOptionPane.showMessageDialog(this, "gcd("+alfa+","+n+")="+mcd, "Algoritmo Euclides",1);
    }//GEN-LAST:event_btnAEActionPerformed

    private void btnAmbosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmbosActionPerformed
        // TODO add your handling code here:
        int alfa, n, mcd;
        String mensaje="";
        alfa=Integer.parseInt(txtAlfaEuclides.getText());
        n=Integer.parseInt(txtNEuclides.getText());
        mcd=algoritmoEuclides(n,alfa);
        mensaje=mensaje+"gcd("+alfa+","+n+")="+mcd+"\n";
        int [] resultado;
        alfa=Integer.parseInt(txtAlfaEuclides.getText());
        n=Integer.parseInt(txtNEuclides.getText());
        resultado=algoritmoEuclidesExtendido(n,alfa);
        mensaje = mensaje + resultado[0] + "=" + alfa + "( "+resultado[2]+" ) + "+n+"( "+resultado[1]+" )";
        int [] prueba = {alfa};
        int inverse = inverseMultiplicative(prueba,n);
        if(inverse!=-1)
            mensaje=mensaje+"\nEl inverso de "+alfa+" modulo "+n+" es: "+inverse;
        else
            mensaje=mensaje+"\nEl inverso de "+alfa+" modulo "+n+" no existe.";
        JOptionPane.showMessageDialog(this, mensaje, "Algoritmo Euclides Extendido",1);
        
    }//GEN-LAST:event_btnAmbosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmEncriptacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmEncriptacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmEncriptacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmEncriptacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmEncriptacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgpLlave;
    private javax.swing.JButton btnAE;
    private javax.swing.JButton btnAEE;
    private javax.swing.JButton btnAmbos;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox cboAlfabeto;
    private javax.swing.JComboBox cboAlgoritmo;
    private javax.swing.JComboBox cboOperacion;
    private javax.swing.JCheckBox chkEspacios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblAlfa;
    private javax.swing.JLabel lblAlfabeto;
    private javax.swing.JLabel lblAlfabeto1;
    private javax.swing.JLabel lblBeta;
    private javax.swing.JLabel lblBeta1;
    private javax.swing.JLabel lblBeta2;
    private javax.swing.JLabel lblBeta3;
    private javax.swing.JLabel lblKey;
    private javax.swing.JLabel lblTamLlave;
    private javax.swing.JRadioButton rdbAleatorio;
    private javax.swing.JRadioButton rdbManual;
    private javax.swing.JTextField txtAlfa;
    private javax.swing.JTextField txtAlfaEuclides;
    private javax.swing.JTextField txtAlfabeto;
    private javax.swing.JTextField txtBeta;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextField txtNEuclides;
    private javax.swing.JTextField txtRutaEntrada;
    private javax.swing.JTextField txtTamLlave;
    // End of variables declaration//GEN-END:variables
}
