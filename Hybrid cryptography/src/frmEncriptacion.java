
import java.util.*;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Alex Ibarra
 */
public class frmEncriptacion extends javax.swing.JFrame {

    File llave1, llave2;
    File fichero;
    int tamCabecera = 54; //Tamaño cabecera bmp es 54 bytes
    byte[] data = null;
    byte[] cabecera = new byte[tamCabecera];
    byte[] datos = null;
    byte[] resultado = null;
    byte[] llave = null;
    String nombre;
    String publicKey = "", privateKey = "";
    PublicKey llavePublica = null;
    PrivateKey llavePrivada = null;
    Key aver = null;

    /**
     * Creates new form frmEncriptacion
     */
    public frmEncriptacion() {
        initComponents();
        setLocationRelativeTo(null);
        cboConjunto.setSelectedIndex(0);
        txtRutaEntrada.setText("");
        txtLlave1.setText("");
        txtLlave1.setVisible(true);
        btnBuscarLlave1.setVisible(true);

        lblLlave1.setVisible(false);
        cboOperacion.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtRutaEntrada = new javax.swing.JTextField();
        cboConjunto = new javax.swing.JComboBox();
        btnBuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        btnEjecutar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtLlave1 = new javax.swing.JTextField();
        btnBuscarLlave1 = new javax.swing.JButton();
        lblLlave1 = new javax.swing.JLabel();
        btnGenerar = new javax.swing.JButton();
        cboOperacion = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtLlave2 = new javax.swing.JTextField();
        lblLlave2 = new javax.swing.JLabel();
        btnBuscarLlave2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtRutaEntrada.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtRutaEntrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 650, 40));

        cboConjunto.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboConjunto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cifrar/Descifrar", "Firmar/Verificar", "Ambos" }));
        cboConjunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboConjuntoActionPerformed(evt);
            }
        });
        getContentPane().add(cboConjunto, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 250, 50));

        btnBuscar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 130, 160, 40));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Cifrador hibrido");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, -1, 40));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Ingrese la ruta del archivo:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        btnSalir.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 490, 160, 40));

        btnEjecutar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnEjecutar.setText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEjecutar, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 490, 160, 40));

        btnLimpiar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 490, 160, 40));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 500, 40, 60));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Selecciona la operación a realizar:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 190, -1, -1));

        txtLlave1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtLlave1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 420, 40));

        btnBuscarLlave1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBuscarLlave1.setText("Buscar");
        btnBuscarLlave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarLlave1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscarLlave1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 350, 160, 40));

        lblLlave1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblLlave1.setText("Selecciona la llave privada:");
        getContentPane().add(lblLlave1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, -1, 20));

        btnGenerar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnGenerar.setText("Generar llaves RSA");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGenerar, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 350, 180, 40));

        cboOperacion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboOperacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cifrar", "Descifrar" }));
        cboOperacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboOperacionActionPerformed(evt);
            }
        });
        getContentPane().add(cboOperacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 230, 250, 50));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Selecciona lo que deseas hacer:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 190, -1, -1));

        txtLlave2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(txtLlave2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, 420, 40));

        lblLlave2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblLlave2.setText("Selecciona la llave publica del destinatario:");
        getContentPane().add(lblLlave2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, -1, -1));

        btnBuscarLlave2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBuscarLlave2.setText("Buscar");
        btnBuscarLlave2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarLlave2ActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscarLlave2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 430, 160, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\Users\\alexi\\Desktop"));
        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            fichero = fileChooser.getSelectedFile();
            txtRutaEntrada.setText(fichero.getPath());
            nombre = fichero.getAbsolutePath().replace(".txt", "");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        BufferedWriter bw;
        //Ejecucion de cifrado o descifrado
        try {
            BufferedReader bf = new BufferedReader(new FileReader(fichero));
            String texto = "";
            int caracter;
            caracter = bf.read();
            while (caracter != -1) {
                texto = texto + (char) caracter;
                caracter = bf.read();
            }
            bf.close();
            obtenerLlaveDeCuadros();

            //Se verifica la opción del usuario
            int acciones, operacion;
            acciones = cboConjunto.getSelectedIndex();
            operacion = cboOperacion.getSelectedIndex();
            if (acciones == 0) {                          //Cifrar/Descifrar
                if (operacion == 0) {
                    //Cifrar
                    String cifradoYLlaveCiifrada = cifrar(texto);

                    //Se escribe en el archivo de resultado
                    bw = new BufferedWriter(new FileWriter(nombre + "_C.txt"));
                    bw.write(cifradoYLlaveCiifrada);
                    bw.close();
                    JOptionPane.showMessageDialog(this, "Documento cifrado exitosamente", "Éxito", 1);

                } else {
                    //Descifrar
                    String mDescifrada = descifrar(texto);
                    //Se escribe en el archivo de resultado
                    bw = new BufferedWriter(new FileWriter(nombre + "_D.txt"));
                    bw.write(mDescifrada);
                    bw.close();
                    JOptionPane.showMessageDialog(this, "Se ha descifrado correctamente", "Éxito", 1);
                }
            } else if (acciones == 1) {                     //Firmar/Verificar
                if (operacion == 0) {
                    String firma = firmar(texto);
                    bw = new BufferedWriter(new FileWriter(nombre + "_firmado.txt"));
                    bw.write(texto+firma);
                    bw.close();
                    JOptionPane.showMessageDialog(this, "Documento firmado exitosamente", "Éxito", 1);
                } else {
                    if (verificar(texto)) {
                        JOptionPane.showMessageDialog(this, "Efectivamente, el documento lo envío el destinatario correcto", "Éxito", 1);
                    } else {
                        JOptionPane.showMessageDialog(this, "La firma es incorrecta, no confiar en el mensaje recibido", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                if (operacion == 0) {
                    //Firmar
                    String firma = firmar(texto);
                    //Cifrar
                    String cifradoYLlaveCiifrada = cifrar(texto);
                    //Unir cifrado y firma
                    bw = new BufferedWriter(new FileWriter(nombre + "_C_firmado.txt"));
                    bw.write(cifradoYLlaveCiifrada+firma);
                    bw.close();
                    JOptionPane.showMessageDialog(this, "Documento cifrado y firmado exitosamente", "Éxito", 1);
                } else {
                    //Separar texto y llave cifrada de la firma
                    String textoLlaveCifrada = texto.substring(0, texto.length() - 172);
                    String firma = new String(texto.substring(texto.length() - 172));
                    System.out.println("Firma: "+firma+"\n");
                    //Descifrar
                    String mDescifrado = "";
                    mDescifrado = descifrar(textoLlaveCifrada);
                    
                    if(mDescifrado.equals("")){
                        JOptionPane.showMessageDialog(this, "No se puede descifrar el mensaje con la llave privada, probablemente no es para ti", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    
                    //Verificar
                    if (verificar(mDescifrado + firma)) {
                        bw = new BufferedWriter(new FileWriter(nombre + "_D_verificado.txt"));
                        bw.write(mDescifrado);
                        bw.close();
                        JOptionPane.showMessageDialog(this, "Descifrado y verificación exitosos", "Éxito", 1);
                    } else {
                        bw = new BufferedWriter(new FileWriter(nombre + "_D.txt"));
                        bw.write(mDescifrado);
                        bw.close();
                        JOptionPane.showMessageDialog(this, "La firma es incorrecta, no confiar en el mensaje recibido", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private String cifrar(String texto) {
        String CyLlaveCifrada = "";
        try {
            //Se genera una llave aleatoria
            String randomAESKey = generarLlaveAleatoriaAES();
            Key keyAleatoria = new SecretKeySpec(randomAESKey.getBytes(), "AES");

            //Se cifra el documento con AES CBC y la llave aleatoria generada
            Cipher aes = Cipher.getInstance("AES/CBC/PKCS5Padding");
            aes.init(Cipher.ENCRYPT_MODE, keyAleatoria, new IvParameterSpec(new byte[16]));
            byte[] bytesCifrado = aes.doFinal(texto.getBytes());
            String C = Base64.getEncoder().encodeToString(bytesCifrado);

            //Se cifra la llave aleatoria usando RSA y la llave pública del destinatario
            String keyCifrada = cifrarRSA(new String(keyAleatoria.getEncoded()), 0);
            CyLlaveCifrada = C + keyCifrada;
            System.out.println("C: " + C);
            System.out.println("keyCifrada: " + keyCifrada);
            System.out.println("keyAleatoria: " + randomAESKey);
            System.out.println("");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return CyLlaveCifrada;
    }

    private String descifrar(String texto) {
        String mDescifrada = "";
        try {
            //Separar el texto cifrado con AES de la llave cifrada con RSA
            String C = texto.substring(0, texto.length() - 172);
            String keyCifrada = new String(texto.substring(texto.length() - 172));

            //Descifrar la keyCifrada para obtener la keyAleatoria que se generó, usando RSA
            String keyDescifrada = descifrarRSA(keyCifrada, 1);
            Key keyAleatoria = new SecretKeySpec(keyDescifrada.getBytes(), "AES");

            //Descifrar el mensaje usando AES CBC y la llave aleatoria descifrada
            Cipher aes = Cipher.getInstance("AES/CBC/PKCS5Padding");
            aes.init(Cipher.DECRYPT_MODE, keyAleatoria, new IvParameterSpec(new byte[16]));
            byte[] textoDescifrado = aes.doFinal(Base64.getDecoder().decode(C));
            mDescifrada = new String(textoDescifrado);

            System.out.println("C: " + C);
            System.out.println("keyCifrada: " + keyCifrada);
            System.out.println("keyDescifrada: " + keyDescifrada);
            System.out.println("");
        } catch (Exception e) {
            //e.printStackTrace();
        }
        return mDescifrada;
    }

    private String firmar(String texto) {
        String firma = "";
        try {
            MessageDigest hash = MessageDigest.getInstance("SHA-256");
            byte[] digesto = hash.digest(texto.getBytes());

            firma = cifrarRSA(new String(digesto), 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("Firma: "+firma+"\n");
        return firma;
    }

    private boolean verificar(String texto) {
        boolean isVerified = false;
        try {
            String firma = new String(texto.substring(texto.length() - 172));
            texto = texto.substring(0, texto.length() - 172);
            MessageDigest hash = MessageDigest.getInstance("SHA-256");

            byte[] digesto = hash.digest(texto.getBytes());
            String digestoDescifrado = descifrarRSA(firma, 0);

            if (new String(digesto).equals(digestoDescifrado)) {
                isVerified = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return isVerified;
    }

    private String generarLlaveAleatoriaAES() {
        Random rn = new Random();
        String generatedKey = "";
        for (int i = 0; i < 16; i++) {
            int a = rn.nextInt(62);
            if (a < 26) {
                generatedKey = generatedKey + (char) (a + 65);
            } else if (a >= 26 && a < 52) {
                generatedKey = generatedKey + (char) (a + 71);
            } else {
                generatedKey = generatedKey + (char) (a - 4);
            }
        }
        System.out.println("LLAve generada: " + generatedKey);
        return generatedKey;
    }

    private byte[] generateRandomAESKey() {
        Random rn = new Random();
        byte[] generatedKey = new byte[16];
        rn.nextBytes(generatedKey);
        return generatedKey;
    }

    private String cifrarRSA(String texto, int cipherMode) {            //cipherMode=0 usa llave publica, cipherMode=1 usa llave privada para el cifrado 
        String resultado = "";
        try {
            byte[] textoCifrado;
            Cipher cipher = Cipher.getInstance("RSA/ECB/NoPadding");
            if (cipherMode == 0) {
                cipher.init(Cipher.ENCRYPT_MODE, llavePublica);
            } else {
                cipher.init(Cipher.ENCRYPT_MODE, llavePrivada);
            }
            textoCifrado = cipher.doFinal(texto.getBytes());
            resultado = Base64.getEncoder().encodeToString(textoCifrado);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return resultado;
    }

    private String descifrarRSA(String texto, int decipherMode) {       //decipherMode=0 usa llave publica, decipherMode=1 usa llave privada para el cifrado
        byte[] textoDescifrado = null;
        try {
            Cipher cipher = Cipher.getInstance("RSA/ECB/NoPadding");
            if (decipherMode == 0) {
                cipher.init(Cipher.DECRYPT_MODE, llavePublica);
            } else {
                cipher.init(Cipher.DECRYPT_MODE, llavePrivada);
            }
            textoDescifrado = cipher.doFinal(Base64.getDecoder().decode(texto));
            textoDescifrado = trim(textoDescifrado);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", 1);
        }
        return new String(textoDescifrado);
    }

    private static byte[] trim(byte[] bytes) {
        int i = 0;
        while (i <= (bytes.length - 1) && bytes[i] == 0) {
            i++;
        }
        return Arrays.copyOfRange(bytes, i, bytes.length);
    }

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        cboConjunto.setSelectedIndex(0);
        txtRutaEntrada.setText("");
        btnBuscarLlave1.setVisible(true);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void cboConjuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboConjuntoActionPerformed
        // TODO add your handling code here:
        if (cboConjunto.getSelectedIndex() == 0) {
            cboOperacion.removeItemAt(0);
            cboOperacion.removeItemAt(0);
            cboOperacion.addItem("Cifrar");
            cboOperacion.addItem("Descifrar");
            cboOperacion.setSelectedIndex(0);
        } else if (cboConjunto.getSelectedIndex() == 1) {
            cboOperacion.removeItemAt(0);
            cboOperacion.removeItemAt(0);
            cboOperacion.addItem("Firmar");
            cboOperacion.addItem("Verificar");
            cboOperacion.setSelectedIndex(0);
        } else {
            cboOperacion.removeItemAt(0);
            cboOperacion.removeItemAt(0);
            cboOperacion.addItem("Cifrar/Firmar");
            cboOperacion.addItem("Descifrar/Verificar");
            cboOperacion.setSelectedIndex(0);
        }
    }//GEN-LAST:event_cboConjuntoActionPerformed

    private void obtenerLlaveDeCuadros() {
        int op1, op2, sel = 0;
        boolean pubKey = false, priKey = false;
        File arch1 = null, arch2 = null;
        op1 = cboConjunto.getSelectedIndex();
        op2 = cboOperacion.getSelectedIndex();
        try {
            if (op1 == 0) {
                if (op2 == 0) {
                    pubKey = true;
                    priKey = false;
                } else {
                    pubKey = false;
                    priKey = true;
                }
            } else if (op1 == 1) {
                if (op2 == 0) {
                    pubKey = false;
                    priKey = true;
                } else {
                    pubKey = true;
                    priKey = false;
                }
            } else {
                pubKey = true;
                priKey = true;
                if (op2 == 0) {
                    sel = 0;
                } else {
                    sel = 1;
                }
            }

            if (pubKey && priKey) {
                if (sel == 0) {
                    arch1 = llave1;
                    arch2 = llave2;
                } else {
                    arch1 = llave2;
                    arch2 = llave1;
                }

                BufferedReader bf = new BufferedReader(new FileReader(arch1));
                String texto = "";
                int caracter;
                caracter = bf.read();
                while (caracter != -1) {
                    texto = texto + (char) caracter;
                    caracter = bf.read();
                }
                bf.close();

                publicKey = texto;

                KeyFactory factory = KeyFactory.getInstance("RSA");
                llavePublica = (PublicKey) factory.generatePublic(new X509EncodedKeySpec(Base64.getDecoder().decode(publicKey)));

                bf = new BufferedReader(new FileReader(arch2));
                texto = "";
                caracter = bf.read();
                while (caracter != -1) {
                    texto = texto + (char) caracter;
                    caracter = bf.read();
                }
                bf.close();
                privateKey = texto;
                factory = KeyFactory.getInstance("RSA");
                llavePrivada = (PrivateKey) factory.generatePrivate(new PKCS8EncodedKeySpec(Base64.getDecoder().decode(privateKey)));

            } else {
                if (priKey) {
                    BufferedReader bf = new BufferedReader(new FileReader(llave1));
                    String texto = "";
                    int caracter;
                    caracter = bf.read();
                    while (caracter != -1) {
                        texto = texto + (char) caracter;
                        caracter = bf.read();
                    }
                    bf.close();
                    privateKey = texto;
                    KeyFactory factory = KeyFactory.getInstance("RSA");
                    llavePrivada = (PrivateKey) factory.generatePrivate(new PKCS8EncodedKeySpec(Base64.getDecoder().decode(privateKey)));

                } else if (pubKey) {
                    BufferedReader bf = new BufferedReader(new FileReader(llave1));
                    String texto = "";
                    int caracter;
                    caracter = bf.read();
                    while (caracter != -1) {
                        texto = texto + (char) caracter;
                        caracter = bf.read();
                    }
                    bf.close();

                    publicKey = texto;

                    KeyFactory factory = KeyFactory.getInstance("RSA");
                    llavePublica = (PublicKey) factory.generatePublic(new X509EncodedKeySpec(Base64.getDecoder().decode(publicKey)));
                }
            }

        } catch (Exception e) {

        }

    }


    private void btnBuscarLlave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarLlave1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\Users\\alexi\\Desktop"));
        //fileChooser.setCurrentDirectory(new File("."));
        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            llave1 = fileChooser.getSelectedFile();
            txtLlave1.setText(llave1.getPath());
        }
    }//GEN-LAST:event_btnBuscarLlave1ActionPerformed


    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        // TODO add your handling code here:
        try {
            KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
            kpg.initialize(1024);
            KeyPair kp;
            kp = kpg.genKeyPair();

            llavePublica = kp.getPublic();
            llavePrivada = kp.getPrivate();

            publicKey = Base64.getEncoder().encodeToString(llavePublica.getEncoded());
            privateKey = Base64.getEncoder().encodeToString(llavePrivada.getEncoded());
            System.out.println(publicKey);
            System.out.println("");
            System.out.println(privateKey);
            BufferedWriter bw = new BufferedWriter(new FileWriter("publicKey.txt"));
            bw.write(publicKey);
            bw.close();
            bw = new BufferedWriter(new FileWriter("privateKey.txt"));
            bw.write(privateKey);
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void cboOperacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboOperacionActionPerformed
        // TODO add your handling code here:
        if (cboConjunto.getSelectedIndex() == 0) {          //Cifrar/Descifrar
            txtLlave1.setVisible(true);
            txtLlave2.setVisible(false);
            lblLlave1.setVisible(true);
            lblLlave2.setVisible(false);
            txtLlave1.setText("");
            txtLlave2.setText("");
            btnBuscarLlave2.setVisible(false);
            if (cboOperacion.getSelectedIndex() == 0) {
                lblLlave1.setText("Introduce la llave pública del destinatario para cifrar: ");
            } else {
                lblLlave1.setText("Introduce tu llave privada para descifrar: ");
            }
        } else if (cboConjunto.getSelectedIndex() == 1) {    //Firmar/Verificar
            txtLlave1.setVisible(true);
            txtLlave1.setText("");
            txtLlave2.setVisible(false);
            txtLlave2.setText("");
            lblLlave1.setVisible(true);
            lblLlave2.setVisible(false);
            btnBuscarLlave2.setVisible(false);
            if (cboOperacion.getSelectedIndex() == 0) {
                lblLlave1.setText("Introduce tu llave privada para firmar: ");
            } else {
                lblLlave1.setText("Introduce la llave publica del remitente para verificar: ");
            }
        } else {                                          //Ambos
            txtLlave1.setVisible(true);
            txtLlave2.setVisible(true);
            lblLlave1.setVisible(true);
            lblLlave2.setVisible(true);
            txtLlave1.setText("");
            txtLlave2.setText("");
            btnBuscarLlave2.setVisible(true);
            if (cboOperacion.getSelectedIndex() == 0) {
                lblLlave1.setText("Introduce la llave pública del destinatario para cifrar: ");
                lblLlave2.setText("Introduce tu llave privada para firmar: ");
            } else {
                lblLlave1.setText("Introduce tu llave privada para descifrar: ");
                lblLlave2.setText("Introduce la llave publica del remitente para verificar: ");
            }
        }
    }//GEN-LAST:event_cboOperacionActionPerformed

    private void btnBuscarLlave2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarLlave2ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\Users\\alexi\\Desktop"));
        //fileChooser.setCurrentDirectory(new File("."));
        int seleccion = fileChooser.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            llave2 = fileChooser.getSelectedFile();
            txtLlave2.setText(llave2.getPath());
        }
    }//GEN-LAST:event_btnBuscarLlave2ActionPerformed

    /*public String bytesToString(byte[] b) {
     byte[] b2 = new byte[b.length + 1];
     b2[0] = 1;
     System.arraycopy(b, 0, b2, 1, b.length);
     return new BigInteger(b2).toString(36);
     }
    
     public byte[] stringToBytes(String s) {
     byte[] b2 = new BigInteger(s, 36).toByteArray();
     return Arrays.copyOfRange(b2, 1, b2.length);
     }*/
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmEncriptacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmEncriptacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmEncriptacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmEncriptacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmEncriptacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnBuscarLlave1;
    private javax.swing.JButton btnBuscarLlave2;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox cboConjunto;
    private javax.swing.JComboBox cboOperacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblLlave1;
    private javax.swing.JLabel lblLlave2;
    private javax.swing.JTextField txtLlave1;
    private javax.swing.JTextField txtLlave2;
    private javax.swing.JTextField txtRutaEntrada;
    // End of variables declaration//GEN-END:variables
}
